import React, { useState, useRef, useEffect } from "react";
import IntlTelInput from "intl-tel-input/react";
import "intl-tel-input/build/css/intlTelInput.css";
import "./App.css"; // Place your custom styles here

const COUNTRIES = [
  { code: "af", name: "Afghanistan" }, { code: "al", name: "Albania" }, { code: "dz", name: "Algeria" }, { code: "as", name: "American Samoa" }, { code: "ad", name: "Andorra" }, { code: "ao", name: "Angola" }, { code: "ai", name: "Anguilla" }, { code: "aq", name: "Antarctica" }, { code: "ag", name: "Antigua and Barbuda" }, { code: "ar", name: "Argentina" }, { code: "am", name: "Armenia" }, { code: "aw", name: "Aruba" }, { code: "au", name: "Australia" }, { code: "at", name: "Austria" }, { code: "az", name: "Azerbaijan" }, { code: "bs", name: "Bahamas" }, { code: "bh", name: "Bahrain" }, { code: "bd", name: "Bangladesh" }, { code: "bb", name: "Barbados" }, { code: "by", name: "Belarus" }, { code: "be", name: "Belgium" }, { code: "bz", name: "Belize" }, { code: "bj", name: "Benin" }, { code: "bm", name: "Bermuda" }, { code: "bt", name: "Bhutan" }, { code: "bo", name: "Bolivia" }, { code: "bq", name: "Bonaire, Sint Eustatius and Saba" }, { code: "ba", name: "Bosnia and Herzegovina" }, { code: "bw", name: "Botswana" }, { code: "bv", name: "Bouvet Island" }, { code: "br", name: "Brazil" }, { code: "io", name: "British Indian Ocean Territory" }, { code: "bn", name: "Brunei Darussalam" }, { code: "bg", name: "Bulgaria" }, { code: "bf", name: "Burkina Faso" }, { code: "bi", name: "Burundi" }, { code: "cv", name: "Cabo Verde" }, { code: "kh", name: "Cambodia" }, { code: "cm", name: "Cameroon" }, { code: "ca", name: "Canada" }, { code: "ky", name: "Cayman Islands" }, { code: "cf", name: "Central African Republic" }, { code: "td", name: "Chad" }, { code: "cl", name: "Chile" }, { code: "cn", name: "China" }, { code: "cx", name: "Christmas Island" }, { code: "cc", name: "Cocos (Keeling) Islands" }, { code: "co", name: "Colombia" }, { code: "km", name: "Comoros" }, { code: "cg", name: "Congo" }, { code: "cd", name: "Congo, Democratic Republic of the" }, { code: "ck", name: "Cook Islands" }, { code: "cr", name: "Costa Rica" }, { code: "ci", name: "Côte d'Ivoire" }, { code: "hr", name: "Croatia" }, { code: "cu", name: "Cuba" }, { code: "cw", name: "Curaçao" }, { code: "cy", name: "Cyprus" }, { code: "cz", name: "Czechia" }, { code: "dk", name: "Denmark" }, { code: "dj", name: "Djibouti" }, { code: "dm", name: "Dominica" }, { code: "do", name: "Dominican Republic" }, { code: "ec", name: "Ecuador" }, { code: "eg", name: "Egypt" }, { code: "sv", name: "El Salvador" }, { code: "gq", name: "Equatorial Guinea" }, { code: "er", name: "Eritrea" }, { code: "ee", name: "Estonia" }, { code: "sz", name: "Eswatini" }, { code: "et", name: "Ethiopia" }, { code: "fk", name: "Falkland Islands (Malvinas)" }, { code: "fo", name: "Faroe Islands" }, { code: "fj", name: "Fiji" }, { code: "fi", name: "Finland" }, { code: "fr", name: "France" }, { code: "gf", name: "French Guiana" }, { code: "pf", name: "French Polynesia" }, { code: "tf", name: "French Southern Territories" }, { code: "ga", name: "Gabon" }, { code: "gm", name: "Gambia" }, { code: "ge", name: "Georgia" }, { code: "de", name: "Germany" }, { code: "gh", name: "Ghana" }, { code: "gi", name: "Gibraltar" }, { code: "gr", name: "Greece" }, { code: "gl", name: "Greenland" }, { code: "gd", name: "Grenada" }, { code: "gp", name: "Guadeloupe" }, { code: "gu", name: "Guam" }, { code: "gt", name: "Guatemala" }, { code: "gg", name: "Guernsey" }, { code: "gn", name: "Guinea" }, { code: "gw", name: "Guinea-Bissau" }, { code: "gy", name: "Guyana" }, { code: "ht", name: "Haiti" }, { code: "hm", name: "Heard Island and McDonald Islands" }, { code: "va", name: "Holy See" }, { code: "hn", name: "Honduras" }, { code: "hk", name: "Hong Kong" }, { code: "hu", name: "Hungary" }, { code: "is", name: "Iceland" }, { code: "in", name: "India" }, { code: "id", name: "Indonesia" }, { code: "ir", name: "Iran" }, { code: "iq", name: "Iraq" }, { code: "ie", name: "Ireland" }, { code: "im", name: "Isle of Man" }, { code: "il", name: "Israel" }, { code: "it", name: "Italy" }, { code: "jm", name: "Jamaica" }, { code: "jp", name: "Japan" }, { code: "je", name: "Jersey" }, { code: "jo", name: "Jordan" }, { code: "kz", name: "Kazakhstan" }, { code: "ke", name: "Kenya" }, { code: "ki", name: "Kiribati" }, { code: "kp", name: "Korea (Democratic People's Republic of)" }, { code: "kr", name: "Korea (Republic of)" }, { code: "kw", name: "Kuwait" }, { code: "kg", name: "Kyrgyzstan" }, { code: "la", name: "Lao People's Democratic Republic" }, { code: "lv", name: "Latvia" }, { code: "lb", name: "Lebanon" }, { code: "ls", name: "Lesotho" }, { code: "lr", name: "Liberia" }, { code: "ly", name: "Libya" }, { code: "li", name: "Liechtenstein" }, { code: "lt", name: "Lithuania" }, { code: "lu", name: "Luxembourg" }, { code: "mo", name: "Macao" }, { code: "mg", name: "Madagascar" }, { code: "mw", name: "Malawi" }, { code: "my", name: "Malaysia" }, { code: "mv", name: "Maldives" }, { code: "ml", name: "Mali" }, { code: "mt", name: "Malta" }, { code: "mh", name: "Marshall Islands" }, { code: "mq", name: "Martinique" }, { code: "mr", name: "Mauritania" }, { code: "mu", name: "Mauritius" }, { code: "yt", name: "Mayotte" }, { code: "mx", name: "Mexico" }, { code: "fm", name: "Micronesia (Federated States of)" }, { code: "md", name: "Moldova" }, { code: "mc", name: "Monaco" }, { code: "mn", name: "Mongolia" }, { code: "me", name: "Montenegro" }, { code: "ms", name: "Montserrat" }, { code: "ma", name: "Morocco" }, { code: "mz", name: "Mozambique" }, { code: "mm", name: "Myanmar" }, { code: "na", name: "Namibia" }, { code: "nr", name: "Nauru" }, { code: "np", name: "Nepal" }, { code: "nl", name: "Netherlands" }, { code: "nc", name: "New Caledonia" }, { code: "nz", name: "New Zealand" }, { code: "ni", name: "Nicaragua" }, { code: "ne", name: "Niger" }, { code: "ng", name: "Nigeria" }, { code: "nu", name: "Niue" }, { code: "nf", name: "Norfolk Island" }, { code: "mk", name: "North Macedonia" }, { code: "mp", name: "Northern Mariana Islands" }, { code: "no", name: "Norway" }, { code: "om", name: "Oman" }, { code: "pk", name: "Pakistan" }, { code: "pw", name: "Palau" }, { code: "ps", name: "Palestine, State of" }, { code: "pa", name: "Panama" }, { code: "pg", name: "Papua New Guinea" }, { code: "py", name: "Paraguay" }, { code: "pe", name: "Peru" }, { code: "ph", name: "Philippines" }, { code: "pn", name: "Pitcairn" }, { code: "pl", name: "Poland" }, { code: "pt", name: "Portugal" }, { code: "pr", name: "Puerto Rico" }, { code: "qa", name: "Qatar" }, { code: "re", name: "Réunion" }, { code: "ro", name: "Romania" }, { code: "ru", name: "Russia" }, { code: "rw", name: "Rwanda" }, { code: "bl", name: "Saint Barthélemy" }, { code: "sh", name: "Saint Helena, Ascension and Tristan da Cunha" }, { code: "kn", name: "Saint Kitts and Nevis" }, { code: "lc", name: "Saint Lucia" }, { code: "mf", name: "Saint Martin (French part)" }, { code: "pm", name: "Saint Pierre and Miquelon" }, { code: "vc", name: "Saint Vincent and the Grenadines" }, { code: "ws", name: "Samoa" }, { code: "sm", name: "San Marino" }, { code: "st", name: "Sao Tome and Principe" }, { code: "sa", name: "Saudi Arabia" }, { code: "sn", name: "Senegal" }, { code: "rs", name: "Serbia" }, { code: "sc", name: "Seychelles" }, { code: "sl", name: "Sierra Leone" }, { code: "sg", name: "Singapore" }, { code: "sx", name: "Sint Maarten (Dutch part)" }, { code: "sk", name: "Slovakia" }, { code: "si", name: "Slovenia" }, { code: "sb", name: "Solomon Islands" }, { code: "so", name: "Somalia" }, { code: "za", name: "South Africa" }, { code: "gs", name: "South Georgia and the South Sandwich Islands" }, { code: "ss", name: "South Sudan" }, { code: "es", name: "Spain" }, { code: "lk", name: "Sri Lanka" }, { code: "sd", name: "Sudan" }, { code: "sr", name: "Suriname" }, { code: "sj", name: "Svalbard and Jan Mayen" }, { code: "se", name: "Sweden" }, { code: "ch", name: "Switzerland" }, { code: "sy", name: "Syrian Arab Republic" }, { code: "tw", name: "Taiwan" }, { code: "tj", name: "Tajikistan" }, { code: "tz", name: "Tanzania" }, { code: "th", name: "Thailand" }, { code: "tl", name: "Timor-Leste" }, { code: "tg", name: "Togo" }, { code: "tk", name: "Tokelau" }, { code: "to", name: "Tonga" }, { code: "tt", name: "Trinidad and Tobago" }, { code: "tn", name: "Tunisia" }, { code: "tr", name: "Turkey" }, { code: "tm", name: "Turkmenistan" }, { code: "tc", name: "Turks and Caicos Islands" }, { code: "tv", name: "Tuvalu" }, { code: "ug", name: "Uganda" }, { code: "ua", name: "Ukraine" }, { code: "ae", name: "United Arab Emirates" }, { code: "gb", name: "United Kingdom" }, { code: "us", name: "United States" }, { code: "um", name: "United States Minor Outlying Islands" }, { code: "uy", name: "Uruguay" }, { code: "uz", name: "Uzbekistan" }, { code: "vu", name: "Vanuatu" }, { code: "ve", name: "Venezuela" }, { code: "vn", name: "Viet Nam" }, { code: "vg", name: "Virgin Islands (British)" }, { code: "vi", name: "Virgin Islands (U.S.)" }, { code: "wf", name: "Wallis and Futuna" }, { code: "eh", name: "Western Sahara" }, { code: "ye", name: "Yemen" }, { code: "zm", name: "Zambia" }, { code: "zw", name: "Zimbabwe" }
  
];
const BUSINESS_TYPES = [
  "Cryptocurrency Exchange",
  "Payment Processor",
  "Digital Wallet Provider",
  "DeFi Protocol",
  "Banking Institution",
  "Fintech Startup",
  "Compliance Firm",
  "Other",
];

// CustomDropdown component styled like .flip-card__input
const CustomDropdown = ({
  options,
  placeholder,
  value,
  onChange,
  required = false,
}: {
  options: { value: string; label: string }[];
  placeholder: string;
  value: string;
  onChange: (val: string) => void;
  required?: boolean;
}) => {
  const [open, setOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handler = (e: MouseEvent) => {
      if (ref.current && !ref.current.contains(e.target as Node)) setOpen(false);
    };
    document.addEventListener("mousedown", handler);
    return () => document.removeEventListener("mousedown", handler);
  }, []);

  const selectedLabel =
    options.find((opt) => opt.value === value)?.label || "";

  return (
    <div
      ref={ref}
      className="flip-card__input"
      tabIndex={0}
      style={{
        position: "relative",
        background: "var(--bg-color)",
        boxShadow: "4px 4px var(--main-color)",
        border: "2px solid var(--main-color)",
        borderRadius: 5,
        fontWeight: 600,
        fontSize: 15,
        color: value ? "var(--font-color)" : "var(--font-color-sub)",
        minWidth: 0,
        maxWidth: 250,
        flex: 1,
        cursor: "pointer",
        padding: 0,
        margin: 0,
        height: 40,
        display: "flex",
        alignItems: "center",
        outline: open ? "2px solid var(--input-focus)" : "none",
      }}
      onClick={() => setOpen((o) => !o)}
      onBlur={() => setOpen(false)}
    >
      <div style={{ padding: "0 10px", width: "100%", userSelect: "none" }}>
        {selectedLabel || (
          <span style={{ opacity: 0.8 }}>{placeholder}</span>
        )}
      </div>
      <span style={{ marginRight: 10, fontSize: 18, color: "#666" }}>▼</span>
      {open && (
        <div
          style={{
            position: "absolute",
            top: 42,
            left: 0,
            right: 0,
            background: "var(--bg-color)",
            border: "2px solid var(--main-color)",
            borderRadius: 5,
            zIndex: 10,
            maxHeight: 200,
            overflowY: "auto",
            boxShadow: "4px 4px var(--main-color)",
          }}
        >
          {options.map((opt) => (
            <div
              key={opt.value}
              style={{
                padding: "8px 10px",
                cursor: "pointer",
                background: value === opt.value ? "#666" : "var(--bg-color)",
                color: value === opt.value ? "#fff" : "var(--font-color)",
                fontWeight: value === opt.value ? 700 : 600,
                transition: "background 0.15s",
              }}
              onMouseDown={() => {
                onChange(opt.value);
                setOpen(false);
              }}
              onMouseEnter={e => {
                (e.currentTarget as HTMLDivElement).style.background = "#666";
                (e.currentTarget as HTMLDivElement).style.color = "#fff";
              }}
              onMouseLeave={e => {
                (e.currentTarget as HTMLDivElement).style.background =
                  value === opt.value ? "#666" : "var(--bg-color)";
                (e.currentTarget as HTMLDivElement).style.color =
                  value === opt.value ? "#fff" : "var(--font-color)";
              }}
            >
              {opt.label}
            </div>
          ))}
        </div>
      )}
      {required && (
        <input
          tabIndex={-1}
          style={{ opacity: 0, width: 0, height: 0, position: "absolute" }}
          value={value}
          required
          readOnly
        />
      )}
    </div>
  );
};

const App = () => {
  const [showSignIn, setShowSignIn] = useState(false);
  const [phone, setPhone] = useState("");
  const [isValid, setIsValid] = useState(false);
  const [country, setCountry] = useState("");
  const [business, setBusiness] = useState("");

  return (
    <div
      style={{
        minHeight: "100vh",
        background: "var(--bg-color)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        fontFamily: "'Fredoka One', cursive, sans-serif",
      }}
    >
      <style>{`
        :root {
          --input-focus: #666;
          --font-color: #323232;
          --font-color-sub: #666;
          --bg-color: #fff;
          --bg-color-alt: #666;
          --main-color: #323232;
        }
        .flip-card__back {
          width: 550px;
          min-width: 320px;
          max-width: 95vw;
          height: auto;
          padding: 20px 18px;
          position: relative;
          display: flex;
          flex-direction: column;
          justify-content: center;
          background: var(--bg-color);
          gap: 16px;
          border-radius: 5px;
          border: 2px solid var(--main-color);
          box-shadow: 4px 4px var(--main-color);
          color: var(--font-color);
          box-sizing: border-box;
          margin: 0 auto;
        }
        .title {
          margin: 20px 0;
          font-size: 25px;
          font-weight: 900;
          text-align: center;
          color: var(--main-color);
        }
        form {
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: 12px;
          width: 100%;
        }
        .row-top {
          display: flex;
          gap: 12px;
          justify-content: center;
          width: 100%;
        }
        .phone-country-row {
          display: flex;
          gap: 12px;
          justify-content: center;
          width: 100%;
          align-items: center;
        }
        .flip-card__input, .phone-number {
          height: 40px;
          border-radius: 5px;
          border: 2px solid var(--main-color);
          background-color: var(--bg-color);
          box-shadow: 4px 4px var(--main-color);
          font-size: 15px;
          font-weight: 600;
          color: var(--font-color);
          padding: 5px 10px;
          outline: none;
          box-sizing: border-box;
          flex: 1;
          min-width: 0;
          max-width: 250px;
        }
        .flip-card__input::placeholder, .phone-number::placeholder {
          color: var(--font-color-sub);
          opacity: 0.8;
        }
        .flip-card__input:focus, .phone-number:focus {
          border: 2px solid var(--input-focus);
          outline: none;
        }
        .button-confirm {
          margin: 18px auto 6px auto;
          width: 120px;
          height: 40px;
          border-radius: 5px;
          border: 2px solid var(--main-color);
          background-color: var(--bg-color);
          box-shadow: 4px 4px var(--main-color);
          font-size: 17px;
          font-weight: 600;
          color: var(--font-color);
          cursor: pointer;
          display: block;
          transition: transform 0.1s, box-shadow 0.1s;
        }
        .button-confirm:active {
          box-shadow: 0 0 var(--main-color);
          transform: translate(3px, 3px);
        }
        .signin-signup-link {
          text-align: center;
          margin-top: 2px;
          margin-bottom: 2px;
          font-size: 16px;
        }
        .signin-signup-link span {
          color: #666;
          font-weight: 700;
          cursor: pointer;
          text-decoration: underline;
        }
        @media (max-width: 700px) {
          .flip-card__back {
            width: 98vw;
            min-width: 0;
            padding: 12px;
          }
          .button-confirm {
            width: 100%;
          }
        }
      `}</style>
      {!showSignIn ? (
        <div className="flip-card__back" role="region" aria-label="Sign up form" id="signup-form">
          <h1 className="title">Sign up</h1>
          <form>
            <div className="row-top">
              <input
                type="text"
                placeholder="First Name"
                className="flip-card__input"
                required
              />
              <input
                type="text"
                placeholder="Last Name"
                className="flip-card__input"
                required
              />
            </div>
            <div className="row-top">
              <input
                type="text"
                placeholder="Company Name"
                className="flip-card__input"
                required
                style={{ maxWidth: 250 }}
              />
              <input
                type="text"
                placeholder="Job Title"
                className="flip-card__input"
                required
                style={{ maxWidth: 250 }}
              />
            </div>
            <div className="row-top">
              <input
                type="email"
                placeholder="Email"
                className="flip-card__input"
                required
                style={{ maxWidth: 250 }}
              />
              <IntlTelInput
                initialValue={phone}
                onChangeNumber={(num) => {
                  // Allow optional "+" at start
                  const formatted = num.replace(/(?!^\+)\D/g, "");
                  setPhone(formatted);
                }}
                onChangeValidity={setIsValid}
                initOptions={{
                  initialCountry: "in",
                  utilsScript:
                    "https://cdn.jsdelivr.net/npm/intl-tel-input@19.5.6/build/js/utils.js",
                } as any} // 👈 cast so TS accepts utilsScript
                inputProps={{
                  name: "phone",
                  required: true,
                  className: "phone-number",
                  style: { maxWidth: 250 },
                  placeholder: "+91 9876543210",
                }}
              />
            </div>
            <div className="row-top">
              <input
                type="password"
                placeholder="Password"
                className="flip-card__input"
                required
                style={{ maxWidth: 250 }}
              />
              <input
                type="password"
                placeholder="Confirm password"
                className="flip-card__input"
                required
                style={{ maxWidth: 250 }}
              />
            </div>
            <div className="phone-country-row" aria-label="Country and business type selection">
              <CustomDropdown
                options={[
                  { value: "", label: "Select country" },
                  ...COUNTRIES.map((c) => ({
                    value: c.code,
                    label: c.name,
                  })),
                ]}
                placeholder="Select country"
                value={country}
                onChange={setCountry}
                required
              />
              <CustomDropdown
                options={[
                  { value: "", label: "Select business type" },
                  ...BUSINESS_TYPES.map((b) => ({
                    value: b.toLowerCase().replace(/\s+/g, "-"),
                    label: b,
                  })),
                ]}
                placeholder="Select business type"
                value={business}
                onChange={setBusiness}
                required
              />
            </div>
            <button type="submit" className="button-confirm" disabled={!isValid}>
              Confirm!
            </button>
          </form>
          <div className="signin-signup-link">
            Existing user? <span onClick={() => setShowSignIn(true)}>Sign in</span>
          </div>
        </div>
      ) : (
        <div className="flip-card__back" role="region" aria-label="Sign in form" id="signin-form">
          <h1 className="title">Sign in</h1>
          <form>
            <div className="row-top">
              <input
                type="email"
                placeholder="Email"
                className="flip-card__input"
                required
                style={{ maxWidth: 250 }}
              />
            </div>
            <div className="row-top">
              <input
                type="password"
                placeholder="Password"
                className="flip-card__input"
                required
                style={{ maxWidth: 250 }}
              />
            </div>
            <button type="submit" className="button-confirm">
              Let's go
            </button>
          </form>
          <div className="signin-signup-link">
            New user? <span onClick={() => setShowSignIn(false)}>Sign up</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default App;

